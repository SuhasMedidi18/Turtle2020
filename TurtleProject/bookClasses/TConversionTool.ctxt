#BlueJ class context
comment0.target=TConversionTool
comment0.text=\r\n\ \ Copyright\ (c)\ 1999,2000\ by\ Florian\ Bomers\ <florian@bome.com>\r\n\ \ Copyright\ (c)\ 2000\ by\ Matthias\ Pfisterer\ <matthias.pfisterer@gmx.de>\r\n\r\n\r\n\ \ \ This\ program\ is\ free\ software;\ you\ can\ redistribute\ it\ and/or\ modify\r\n\ \ \ it\ under\ the\ terms\ of\ the\ GNU\ Library\ General\ Public\ License\ as\ \r\n\ \ \ published\ by\ the\ Free\ Software\ Foundation;\ either\ version\ 2\ of\ the\ \r\n\ \ \ License,\ or\ (at\ your\ option)\ any\ later\ version.\r\n\r\n\ \ \ This\ program\ is\ distributed\ in\ the\ hope\ that\ it\ will\ be\ useful,\r\n\ \ \ but\ WITHOUT\ ANY\ WARRANTY;\ without\ even\ the\ implied\ warranty\ of\r\n\ \ \ MERCHANTABILITY\ or\ FITNESS\ FOR\ A\ PARTICULAR\ PURPOSE.\ \ See\ the\r\n\ \ \ GNU\ Library\ General\ Public\ License\ for\ more\ details.\r\n\r\n\ \ \ You\ should\ have\ received\ a\ copy\ of\ the\ GNU\ Library\ General\ Public\r\n\ \ \ License\ along\ with\ this\ program;\ if\ not,\ write\ to\ the\ Free\ Software\r\n\ \ \ Foundation,\ Inc.,\ 675\ Mass\ Ave,\ Cambridge,\ MA\ 02139,\ USA.\r\n\r\n
comment1.params=buffer\ byteOffset\ bigEndian
comment1.target=int\ bytesToInt16(byte[],\ int,\ boolean)
comment1.text=\r\n\ Converts\ 2\ successive\ bytes\ starting\ at\ <code>byteOffset</code>\ in\ \r\n\ <code>buffer</code>\ to\ a\ signed\ integer\ sample\ with\ 16bit\ range.\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ interpreted\ as\ low\ byte,\r\n\ whereas\ it\ is\ interpreted\ as\ high\ byte\ in\ big\ endian.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
comment10.params=sample\ buffer\ byteOffset\ bigEndian
comment10.target=void\ intToBytes32(int,\ byte[],\ int,\ boolean)
comment10.text=\r\n\ Converts\ a\ 32\ bit\ sample\ of\ type\ <code>int</code>\ to\ 4\ bytes\ in\ an\ array.\r\n\ <code>sample</code>\ is\ interpreted\ as\ signed\ (as\ Java\ does).\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ filled\ with\ lowest\ byte\ of\ \r\n\ sample,\ and\ buffer[byteOffset+3]\ is\ filled\ with\ the\ high\ byte\ of\ \r\n\ sample\ +\ sign\ bit.\r\n\ <p>\ For\ big\ endian,\ this\ is\ reversed.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
comment11.params=b
comment11.target=int\ unsignedByteToInt(byte)
comment11.text=\r\n\ Byte<->Int\ conversions\ for\ unsigned\ pcm\ data\ were\ written\r\n\ by\ myself\ with\ help\ from\ Real's\ Java\ How-To\:\r\n\ http\://www.rgagnon.com/javadetails/java-0026.html\r\n
comment12.params=buffer\ offset\ isBigEndian
comment12.target=int\ unsignedByteToInt16(byte[],\ int,\ boolean)
comment13.params=buffer\ offset\ isBigEndian
comment13.target=int\ unsignedByteToInt24(byte[],\ int,\ boolean)
comment14.params=buffer\ offset\ isBigEndian
comment14.target=int\ unsignedByteToInt32(byte[],\ int,\ boolean)
comment15.params=sample
comment15.target=byte\ intToUnsignedByte(int)
comment16.params=sample\ buffer\ byteOffset\ bigEndian
comment16.target=void\ intToUnsignedBytes16(int,\ byte[],\ int,\ boolean)
comment17.params=sample\ buffer\ byteOffset\ bigEndian
comment17.target=void\ intToUnsignedBytes24(int,\ byte[],\ int,\ boolean)
comment18.params=sample\ buffer\ byteOffset\ bigEndian
comment18.target=void\ intToUnsignedBytes32(int,\ byte[],\ int,\ boolean)
comment2.params=buffer\ byteOffset\ bigEndian
comment2.target=int\ bytesToInt24(byte[],\ int,\ boolean)
comment2.text=\r\n\ Converts\ 3\ successive\ bytes\ starting\ at\ <code>byteOffset</code>\ in\ \r\n\ <code>buffer</code>\ to\ a\ signed\ integer\ sample\ with\ 24bit\ range.\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ interpreted\ as\ lowest\ byte,\r\n\ whereas\ it\ is\ interpreted\ as\ highest\ byte\ in\ big\ endian.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
comment3.params=buffer\ byteOffset\ bigEndian
comment3.target=int\ bytesToInt32(byte[],\ int,\ boolean)
comment3.text=\r\n\ Converts\ a\ 4\ successive\ bytes\ starting\ at\ <code>byteOffset</code>\ in\ \r\n\ <code>buffer</code>\ to\ a\ signed\ 32bit\ integer\ sample.\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ interpreted\ as\ lowest\ byte,\r\n\ whereas\ it\ is\ interpreted\ as\ highest\ byte\ in\ big\ endian.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
comment4.params=ulawbyte
comment4.target=short\ ulaw2linear(byte)
comment5.params=sample
comment5.target=byte\ linear2ulaw(int)
comment5.text=\r\n\ Converts\ a\ linear\ signed\ 16bit\ sample\ to\ a\ uLaw\ byte.\r\n\ Ported\ to\ Java\ by\ fb.\r\n\ <BR>Originally\ by\:<BR>\r\n\ Craig\ Reese\:\ IDA/Supercomputing\ Research\ Center\ <BR>\r\n\ Joe\ Campbell\:\ Department\ of\ Defense\ <BR>\r\n\ 29\ September\ 1989\ <BR>\r\n
comment6.params=ulawbyte
comment6.target=short\ alaw2linear(byte)
comment7.params=pcm_val
comment7.target=byte\ linear2alaw(short)
comment8.params=sample\ buffer\ byteOffset\ bigEndian
comment8.target=void\ intToBytes16(int,\ byte[],\ int,\ boolean)
comment8.text=\r\n\ Converts\ a\ 16\ bit\ sample\ of\ type\ <code>int</code>\ to\ 2\ bytes\ in\ an\ array.\r\n\ <code>sample</code>\ is\ interpreted\ as\ signed\ (as\ Java\ does).\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ filled\ with\ low\ byte\ of\ sample,\ \r\n\ and\ buffer[byteOffset+1]\ is\ filled\ with\ high\ byte\ of\ sample\ +\ sign\ bit.\r\n\ <p>\ For\ big\ endian,\ this\ is\ reversed.\r\n\ <p>\ Before\ calling\ this\ function,\ it\ should\ be\ assured\ that\ \r\n\ <code>sample</code>\ is\ in\ the\ 16bit\ range\ -\ it\ will\ not\ be\ clipped.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
comment9.params=sample\ buffer\ byteOffset\ bigEndian
comment9.target=void\ intToBytes24(int,\ byte[],\ int,\ boolean)
comment9.text=\r\n\ Converts\ a\ 24\ bit\ sample\ of\ type\ <code>int</code>\ to\ 3\ bytes\ in\ an\ array.\r\n\ <code>sample</code>\ is\ interpreted\ as\ signed\ (as\ Java\ does).\r\n\ <p>\r\n\ For\ little\ endian,\ buffer[byteOffset]\ is\ filled\ with\ low\ byte\ of\ sample,\ \r\n\ and\ buffer[byteOffset+2]\ is\ filled\ with\ the\ high\ byte\ of\ sample\ +\ \r\n\ sign\ bit.\r\n\ <p>\ For\ big\ endian,\ this\ is\ reversed.\r\n\ <p>\ Before\ calling\ this\ function,\ it\ should\ be\ assured\ that\ \r\n\ <code>sample</code>\ is\ in\ the\ 24bit\ range\ -\ it\ will\ not\ be\ clipped.\r\n\ <p>\ This\ is\ a\ reference\ function.\r\n
numComments=19
